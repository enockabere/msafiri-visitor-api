from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.db.database import get_db
from app.models.participant_qr import ParticipantQR
from app.models.event_participant import EventParticipant
from app.models.event import Event
from app.schemas.participant_qr import QRAllocationData

router = APIRouter()

@router.get("/qr/{qr_token}")
def get_public_qr_data(qr_token: str, db: Session = Depends(get_db)):
    """Public endpoint to get QR data without authentication"""
    
    print(f"DEBUG: Public QR scan request for token: {qr_token}")
    
    # First try to find the QR record in the database
    qr_record = db.query(ParticipantQR).filter(ParticipantQR.qr_token == qr_token).first()
    
    if qr_record:
        print(f"DEBUG: Found QR record in database")
        try:
            return QRAllocationData.parse_raw(qr_record.qr_data)
        except Exception as e:
            print(f"DEBUG: Error parsing QR data: {e}")
            # Fall through to participant lookup
    
    # If no QR record found, try to find participant by token
    # This is a fallback for temporary tokens generated by the QR generation endpoint
    print(f"DEBUG: No QR record found, searching for participant with token pattern")
    
    # For now, return a generic error since we don't have a way to map temporary tokens
    # to participants without storing them in the database
    raise HTTPException(
        status_code=404, 
        detail="Invalid or expired QR code"
    )

@router.get("/qr/{qr_token}/participant")
def get_participant_by_qr_token(qr_token: str, db: Session = Depends(get_db)):
    """Get participant details by QR token for public scanning"""
    
    print(f"DEBUG: Looking up participant for QR token: {qr_token}")
    
    # Find QR record
    qr_record = db.query(ParticipantQR).filter(ParticipantQR.qr_token == qr_token).first()
    
    if not qr_record:
        print(f"DEBUG: QR token {qr_token} not found in database")
        raise HTTPException(status_code=404, detail="Invalid QR code")
    
    # Get participant
    participant = db.query(EventParticipant).filter(
        EventParticipant.id == qr_record.participant_id
    ).first()
    
    if not participant:
        print(f"DEBUG: Participant not found for QR record")
        raise HTTPException(status_code=404, detail="Participant not found")
    
    # Get event
    event = db.query(Event).filter(Event.id == participant.event_id).first()
    
    print(f"DEBUG: Found participant {participant.full_name} for event {event.title if event else 'Unknown'}")
    
    return {
        "participant": {
            "id": participant.id,
            "full_name": participant.full_name,
            "email": participant.email,
            "status": participant.status
        },
        "event": {
            "id": event.id if event else None,
            "title": event.title if event else "Unknown Event",
            "location": event.location if event else "Unknown Location",
            "start_date": event.start_date.isoformat() if event and event.start_date else None,
            "end_date": event.end_date.isoformat() if event and event.end_date else None
        },
        "qr_data": QRAllocationData.parse_raw(qr_record.qr_data) if qr_record.qr_data else None
    }