"""Add news_updates table

Revision ID: 5ee79a036ab6
Revises: fa1f5d1450a5
Create Date: 2025-10-27 22:49:36.604337

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5ee79a036ab6'
down_revision = 'fa1f5d1450a5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('emergency_contacts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('relationship_type', sa.String(length=100), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('is_primary', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_emergency_contacts_id'), 'emergency_contacts', ['id'], unique=False)
    op.create_table('user_consents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.String(), nullable=False),
    sa.Column('data_protection_accepted', sa.Boolean(), nullable=True),
    sa.Column('terms_conditions_accepted', sa.Boolean(), nullable=True),
    sa.Column('data_protection_version', sa.String(), nullable=True),
    sa.Column('terms_conditions_version', sa.String(), nullable=True),
    sa.Column('data_protection_link', sa.Text(), nullable=True),
    sa.Column('terms_conditions_link', sa.Text(), nullable=True),
    sa.Column('data_protection_accepted_at', sa.DateTime(), nullable=True),
    sa.Column('terms_conditions_accepted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_consents_id'), 'user_consents', ['id'], unique=False)
    op.create_table('agenda_feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('agenda_id', sa.Integer(), nullable=False),
    sa.Column('user_email', sa.String(), nullable=False),
    sa.Column('rating', sa.Float(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['agenda_id'], ['event_agenda.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agenda_feedback_id'), 'agenda_feedback', ['id'], unique=False)
    op.create_table('feedback_responses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('feedback_id', sa.Integer(), nullable=False),
    sa.Column('responder_email', sa.String(), nullable=False),
    sa.Column('response_text', sa.Text(), nullable=False),
    sa.Column('is_like', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['feedback_id'], ['agenda_feedback.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feedback_responses_id'), 'feedback_responses', ['id'], unique=False)
    op.drop_index(op.f('idx_travel_agents_api_token'), table_name='travel_agents')
    op.drop_index(op.f('idx_travel_agents_email'), table_name='travel_agents')
    op.drop_index(op.f('idx_travel_agents_tenant_id'), table_name='travel_agents')
    op.drop_table('travel_agents')
    op.drop_index(op.f('idx_event_reviews_event_id'), table_name='event_reviews')
    op.drop_index(op.f('idx_event_reviews_overall_rating'), table_name='event_reviews')
    op.drop_table('event_reviews')
    op.drop_index(op.f('idx_room_rules_hotel_name'), table_name='room_rules')
    op.drop_table('room_rules')
    op.drop_index(op.f('idx_event_checkins_checkin_date'), table_name='event_checkins')
    op.drop_index(op.f('idx_event_checkins_event_id'), table_name='event_checkins')
    op.drop_index(op.f('idx_event_checkins_participant_id'), table_name='event_checkins')
    op.drop_table('event_checkins')
    op.drop_index(op.f('idx_chat_messages_chat_room_id'), table_name='chat_messages')
    op.drop_index(op.f('idx_chat_messages_created_at'), table_name='chat_messages')
    op.drop_table('chat_messages')
    op.drop_index(op.f('idx_broadcast_reads_broadcast_id'), table_name='broadcast_reads')
    op.drop_index(op.f('idx_broadcast_reads_user_email'), table_name='broadcast_reads')
    op.drop_table('broadcast_reads')
    op.drop_index(op.f('idx_notification_queue_recipient'), table_name='notification_queue')
    op.drop_index(op.f('idx_notification_queue_sent'), table_name='notification_queue')
    op.drop_index(op.f('idx_notification_queue_type'), table_name='notification_queue')
    op.drop_table('notification_queue')
    op.drop_index(op.f('idx_room_assignments_check_in_date'), table_name='room_assignments')
    op.drop_index(op.f('idx_room_assignments_hotel_room'), table_name='room_assignments')
    op.drop_index(op.f('idx_room_assignments_participant_id'), table_name='room_assignments')
    op.drop_index(op.f('idx_room_assignments_room_agent'), table_name='room_assignments')
    op.drop_table('room_assignments')
    op.drop_index(op.f('idx_participant_voucher_redemptions_allocation'), table_name='participant_voucher_redemptions')
    op.drop_index(op.f('idx_participant_voucher_redemptions_allocation_participant'), table_name='participant_voucher_redemptions')
    op.drop_index(op.f('idx_participant_voucher_redemptions_participant'), table_name='participant_voucher_redemptions')
    op.drop_index(op.f('ix_participant_voucher_redemptions_id'), table_name='participant_voucher_redemptions')
    op.drop_table('participant_voucher_redemptions')
    op.drop_index(op.f('idx_recommendations_event_id'), table_name='line_manager_recommendations')
    op.drop_index(op.f('idx_recommendations_token'), table_name='line_manager_recommendations')
    op.drop_table('line_manager_recommendations')
    op.drop_index(op.f('idx_event_allocations_event_id'), table_name='event_allocations')
    op.drop_index(op.f('idx_event_allocations_status'), table_name='event_allocations')
    op.drop_index(op.f('idx_event_allocations_tenant_id'), table_name='event_allocations')
    op.drop_table('event_allocations')
    op.drop_index(op.f('idx_participant_tickets_participant_id'), table_name='participant_tickets')
    op.drop_table('participant_tickets')
    op.drop_index(op.f('idx_event_contacts_contact_type'), table_name='event_contacts')
    op.drop_index(op.f('idx_event_contacts_event_id'), table_name='event_contacts')
    op.drop_table('event_contacts')
    op.drop_index(op.f('idx_broadcasts_expires_at'), table_name='broadcasts')
    op.drop_index(op.f('idx_broadcasts_is_active'), table_name='broadcasts')
    op.drop_index(op.f('idx_broadcasts_priority'), table_name='broadcasts')
    op.drop_index(op.f('idx_broadcasts_tenant_id'), table_name='broadcasts')
    op.drop_table('broadcasts')
    op.drop_table('security_briefings')
    op.drop_index(op.f('idx_redemption_logs_allocation_id'), table_name='redemption_logs')
    op.drop_table('redemption_logs')
    op.drop_index(op.f('idx_direct_messages_recipient'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_recipient_email'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_sender'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_sender_email'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_tenant'), table_name='direct_messages')
    op.drop_index(op.f('idx_direct_messages_tenant_id'), table_name='direct_messages')
    op.drop_table('direct_messages')
    op.drop_index(op.f('idx_ride_requests_event_id'), table_name='ride_requests')
    op.drop_index(op.f('idx_ride_requests_participant_id'), table_name='ride_requests')
    op.drop_index(op.f('idx_ride_requests_status'), table_name='ride_requests')
    op.drop_table('ride_requests')
    op.drop_index(op.f('ix_participant_checklist_status_participant_id'), table_name='participant_checklist_status')
    op.drop_table('participant_checklist_status')
    op.drop_index(op.f('idx_room_allocations_room_id'), table_name='room_allocations')
    op.drop_index(op.f('idx_room_allocations_visitor_id'), table_name='room_allocations')
    op.drop_table('room_allocations')
    op.drop_index(op.f('idx_event_travel_requirements_event_id'), table_name='event_travel_requirements')
    op.drop_table('event_travel_requirements')
    op.drop_index(op.f('idx_app_reviews_overall_rating'), table_name='app_reviews')
    op.drop_index(op.f('idx_app_reviews_user_email'), table_name='app_reviews')
    op.drop_table('app_reviews')
    op.drop_index(op.f('idx_ride_assignments_participant_id'), table_name='ride_assignments')
    op.drop_index(op.f('idx_ride_assignments_ride_id'), table_name='ride_assignments')
    op.drop_table('ride_assignments')
    op.drop_index(op.f('idx_perdiem_requests_arrival_date'), table_name='perdiem_requests')
    op.drop_index(op.f('idx_perdiem_requests_participant_id'), table_name='perdiem_requests')
    op.drop_index(op.f('idx_perdiem_requests_status'), table_name='perdiem_requests')
    op.drop_table('perdiem_requests')
    op.drop_index(op.f('idx_invitations_email'), table_name='invitations')
    op.drop_index(op.f('idx_invitations_tenant_id'), table_name='invitations')
    op.drop_index(op.f('idx_invitations_token'), table_name='invitations')
    op.drop_table('invitations')
    op.drop_index(op.f('idx_airport_pickups_participant_id'), table_name='airport_pickups')
    op.drop_index(op.f('idx_airport_pickups_pickup_completed'), table_name='airport_pickups')
    op.drop_index(op.f('idx_airport_pickups_pickup_time'), table_name='airport_pickups')
    op.drop_index(op.f('idx_airport_pickups_travel_agent_email'), table_name='airport_pickups')
    op.drop_table('airport_pickups')
    op.drop_index(op.f('ix_event_checklist_items_event_id'), table_name='event_checklist_items')
    op.drop_table('event_checklist_items')
    op.drop_index(op.f('idx_event_conflict_checks_participant_email'), table_name='event_conflict_checks')
    op.drop_table('event_conflict_checks')
    op.drop_index(op.f('idx_chat_message_status_message_id'), table_name='chat_message_status')
    op.drop_index(op.f('idx_chat_message_status_recipient'), table_name='chat_message_status')
    op.drop_table('chat_message_status')
    op.drop_index(op.f('idx_participant_qr_codes_participant_id'), table_name='participant_qr_codes')
    op.drop_index(op.f('idx_participant_qr_codes_qr_token'), table_name='participant_qr_codes')
    op.drop_index(op.f('ix_participant_qr_codes_id'), table_name='participant_qr_codes')
    op.drop_table('participant_qr_codes')
    op.drop_index(op.f('idx_extra_item_requests_event_item_id'), table_name='extra_item_requests')
    op.drop_index(op.f('idx_extra_item_requests_participant_id'), table_name='extra_item_requests')
    op.drop_table('extra_item_requests')
    op.drop_index(op.f('idx_chat_rooms_event_id'), table_name='chat_rooms')
    op.drop_index(op.f('idx_chat_rooms_tenant_id'), table_name='chat_rooms')
    op.drop_table('chat_rooms')
    op.drop_index(op.f('idx_room_agents_api_token'), table_name='room_agents')
    op.drop_index(op.f('idx_room_agents_email'), table_name='room_agents')
    op.drop_index(op.f('idx_room_agents_hotel_name'), table_name='room_agents')
    op.drop_table('room_agents')
    op.drop_index(op.f('idx_item_requests_status'), table_name='item_requests')
    op.drop_table('item_requests')
    op.drop_index(op.f('idx_vendor_allocations_vendor_id'), table_name='vendor_allocations')
    op.drop_index(op.f('idx_vendor_allocations_visitor_id'), table_name='vendor_allocations')
    op.drop_table('vendor_allocations')
    op.drop_index(op.f('idx_public_registrations_event_id'), table_name='public_registrations')
    op.drop_index(op.f('idx_public_registrations_msf_email'), table_name='public_registrations')
    op.drop_index(op.f('idx_public_registrations_participant_id'), table_name='public_registrations')
    op.drop_index(op.f('idx_public_registrations_personal_email'), table_name='public_registrations')
    op.drop_table('public_registrations')
    op.drop_index(op.f('idx_event_items_event_id'), table_name='event_items')
    op.drop_table('event_items')
    op.drop_index(op.f('idx_data_deletion_logs_deletion_type'), table_name='data_deletion_logs')
    op.drop_index(op.f('idx_data_deletion_logs_user_email'), table_name='data_deletion_logs')
    op.drop_index(op.f('idx_data_deletion_logs_user_id'), table_name='data_deletion_logs')
    op.drop_table('data_deletion_logs')
    op.drop_index(op.f('idx_participant_profiles_participant_id'), table_name='participant_profiles')
    op.drop_table('participant_profiles')
    op.drop_index(op.f('idx_event_welcome_packages_event_id'), table_name='event_welcome_packages')
    op.drop_table('event_welcome_packages')
    op.drop_table('event_participant_checklists')
    op.drop_index(op.f('idx_event_speakers_event_id'), table_name='event_speakers')
    op.drop_table('event_speakers')
    op.drop_index(op.f('idx_participant_requirement_status_participant_id'), table_name='participant_requirement_status')
    op.drop_table('participant_requirement_status')
    op.drop_index(op.f('idx_event_rides_departure_time'), table_name='event_rides')
    op.drop_index(op.f('idx_event_rides_event_id'), table_name='event_rides')
    op.drop_index(op.f('idx_event_rides_status'), table_name='event_rides')
    op.drop_table('event_rides')
    op.drop_index(op.f('idx_equipment_requests_event_id'), table_name='equipment_requests')
    op.drop_index(op.f('idx_equipment_requests_participant_id'), table_name='equipment_requests')
    op.drop_index(op.f('idx_equipment_requests_status'), table_name='equipment_requests')
    op.drop_table('equipment_requests')
    op.drop_index(op.f('ix_roles_tenant_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('idx_inventory_category'), table_name='inventory')
    op.drop_index(op.f('idx_inventory_tenant_id'), table_name='inventory')
    op.drop_table('inventory')
    op.drop_index(op.f('idx_event_feedback_event_id'), table_name='event_feedback')
    op.drop_index(op.f('idx_event_feedback_participant_email'), table_name='event_feedback')
    op.drop_table('event_feedback')
    op.drop_index(op.f('idx_participant_perdiem_approved'), table_name='participant_perdiem')
    op.drop_index(op.f('idx_participant_perdiem_event_id'), table_name='participant_perdiem')
    op.drop_index(op.f('idx_participant_perdiem_participant_id'), table_name='participant_perdiem')
    op.drop_table('participant_perdiem')
    op.drop_index(op.f('idx_participant_welcome_deliveries_participant_id'), table_name='participant_welcome_deliveries')
    op.drop_table('participant_welcome_deliveries')
    op.drop_index(op.f('idx_participant_allocations_event_item_id'), table_name='participant_allocations')
    op.drop_index(op.f('idx_participant_allocations_participant_id'), table_name='participant_allocations')
    op.drop_table('participant_allocations')
    op.drop_index(op.f('idx_user_profiles_data_deleted'), table_name='user_profiles')
    op.drop_index(op.f('idx_user_profiles_user_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.alter_column('accommodation_allocations', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_accommodation_allocations_event_id'), table_name='accommodation_allocations')
    op.drop_index(op.f('idx_accommodation_allocations_participant_id'), table_name='accommodation_allocations')
    op.drop_index(op.f('idx_accommodation_allocations_room_id'), table_name='accommodation_allocations')
    op.drop_index(op.f('idx_accommodation_allocations_status'), table_name='accommodation_allocations')
    op.drop_index(op.f('idx_accommodation_allocations_tenant_id'), table_name='accommodation_allocations')
    op.drop_index(op.f('idx_accommodation_allocations_vendor_id'), table_name='accommodation_allocations')
    op.create_index(op.f('ix_accommodation_allocations_id'), 'accommodation_allocations', ['id'], unique=False)
    op.create_index(op.f('ix_accommodation_allocations_tenant_id'), 'accommodation_allocations', ['tenant_id'], unique=False)
    op.alter_column('admin_invitations', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               existing_nullable=True)
    op.alter_column('admin_invitations', 'user_existed',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('admin_invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.drop_constraint(op.f('admin_invitations_invitation_token_key'), 'admin_invitations', type_='unique')
    op.drop_index(op.f('idx_admin_invitations_email'), table_name='admin_invitations')
    op.drop_index(op.f('idx_admin_invitations_status'), table_name='admin_invitations')
    op.drop_index(op.f('idx_admin_invitations_token'), table_name='admin_invitations')
    op.create_index(op.f('ix_admin_invitations_email'), 'admin_invitations', ['email'], unique=False)
    op.create_index(op.f('ix_admin_invitations_id'), 'admin_invitations', ['id'], unique=False)
    op.create_index(op.f('ix_admin_invitations_invitation_token'), 'admin_invitations', ['invitation_token'], unique=True)
    op.alter_column('event_agenda', 'event_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('event_agenda', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_agenda', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index(op.f('ix_event_agenda_id'), 'event_agenda', ['id'], unique=False)
    op.alter_column('event_attachments', 'name',
               existing_type=sa.VARCHAR(length=255),
               server_default=None,
               existing_nullable=False)
    op.alter_column('event_attachments', 'url',
               existing_type=sa.VARCHAR(length=500),
               server_default=None,
               existing_nullable=False)
    op.alter_column('event_attachments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_event_attachments_event_id'), table_name='event_attachments')
    op.create_index(op.f('ix_event_attachments_id'), 'event_attachments', ['id'], unique=False)
    op.drop_constraint(op.f('event_attachments_event_id_fkey'), 'event_attachments', type_='foreignkey')
    op.create_foreign_key(None, 'event_attachments', 'events', ['event_id'], ['id'])
    op.add_column('event_participants', sa.Column('travelling_from_country', sa.String(length=100), nullable=True))
    op.alter_column('event_participants', 'full_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('event_participants', 'role',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=True)
    op.alter_column('event_participants', 'participant_role',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('event_participants', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('event_participants', 'requires_eta',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.drop_constraint(op.f('event_participants_event_id_email_key'), 'event_participants', type_='unique')
    op.drop_index(op.f('idx_event_participants_email'), table_name='event_participants')
    op.drop_index(op.f('idx_event_participants_event_id'), table_name='event_participants')
    op.drop_index(op.f('ix_event_participants_event_id'), table_name='event_participants')
    op.create_index(op.f('ix_event_participants_id'), 'event_participants', ['id'], unique=False)
    op.alter_column('events', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_events_duration_days'), table_name='events')
    op.drop_index(op.f('idx_events_end_date'), table_name='events')
    op.drop_index(op.f('idx_events_start_date'), table_name='events')
    op.drop_index(op.f('idx_events_tenant_id'), table_name='events')
    op.create_index(op.f('ix_events_id'), 'events', ['id'], unique=False)
    op.create_unique_constraint(None, 'events', ['title'])
    op.drop_constraint(op.f('events_accommodation_setup_id_fkey'), 'events', type_='foreignkey')
    op.drop_constraint(op.f('events_tenant_id_fkey'), 'events', type_='foreignkey')
    op.create_foreign_key(None, 'events', 'vendor_accommodations', ['vendor_accommodation_id'], ['id'])
    op.drop_column('events', 'accommodation_setup_id')
    op.drop_column('events', 'accommodation')
    op.drop_column('events', 'rates')
    op.drop_column('events', 'room_info')
    op.drop_column('events', 'food_details')
    op.alter_column('guesthouses', 'address',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('guesthouses', 'latitude',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.String(length=20),
               existing_nullable=True)
    op.alter_column('guesthouses', 'longitude',
               existing_type=sa.NUMERIC(precision=11, scale=8),
               type_=sa.String(length=20),
               existing_nullable=True)
    op.alter_column('guesthouses', 'contact_person',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('guesthouses', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('guesthouses', 'total_rooms',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.alter_column('guesthouses', 'occupied_rooms',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('guesthouses', 'created_by',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index(op.f('idx_guesthouses_tenant_id'), table_name='guesthouses')
    op.create_index(op.f('ix_guesthouses_id'), 'guesthouses', ['id'], unique=False)
    op.create_index(op.f('ix_guesthouses_tenant_id'), 'guesthouses', ['tenant_id'], unique=False)
    op.drop_column('guesthouses', 'contact_email')
    op.drop_column('guesthouses', 'contact_phone')
    op.alter_column('notifications', 'tenant_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('notifications', 'notification_type',
               existing_type=postgresql.ENUM('USER_CREATED', 'USER_ACTIVATED', 'USER_DEACTIVATED', 'ROLE_CHANGED', 'TENANT_CREATED', 'TENANT_ACTIVATED', 'TENANT_DEACTIVATED', 'VISITOR_INVITED', 'EVENT_CREATED', 'DOCUMENT_UPLOADED', 'SYSTEM_ANNOUNCEMENT', 'CHAT_MESSAGE', name='notificationtype'),
               nullable=True)
    op.alter_column('notifications', 'action_url',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.drop_index(op.f('idx_notifications_tenant_id'), table_name='notifications')
    op.drop_index(op.f('idx_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_tenant_id'), table_name='notifications')
    op.alter_column('role_change_logs', 'role',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('SUPER_ADMIN', 'MT_ADMIN', 'HR_ADMIN', 'EVENT_ADMIN', 'STAFF', 'USER', 'GUEST', name='roletype'),
               existing_nullable=False)
    op.drop_index(op.f('idx_role_change_logs_action'), table_name='role_change_logs')
    op.drop_index(op.f('idx_role_change_logs_user_email'), table_name='role_change_logs')
    op.drop_index(op.f('idx_role_change_logs_user_id'), table_name='role_change_logs')
    op.create_index(op.f('ix_role_change_logs_id'), 'role_change_logs', ['id'], unique=False)
    op.alter_column('rooms', 'tenant_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('rooms', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('rooms', 'is_occupied',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('rooms', 'current_occupants',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_rooms_guesthouse_id'), table_name='rooms')
    op.create_index(op.f('ix_rooms_id'), 'rooms', ['id'], unique=False)
    op.create_index(op.f('ix_rooms_tenant_id'), 'rooms', ['tenant_id'], unique=False)
    op.drop_constraint(op.f('rooms_guesthouse_id_fkey'), 'rooms', type_='foreignkey')
    op.drop_constraint(op.f('rooms_tenant_id_fkey'), 'rooms', type_='foreignkey')
    op.create_foreign_key(None, 'rooms', 'guesthouses', ['guesthouse_id'], ['id'])
    op.drop_column('rooms', 'gender_restriction')
    op.add_column('security_briefs', sa.Column('status', sa.String(length=50), nullable=True))
    op.add_column('security_briefs', sa.Column('publish_start_date', sa.String(length=255), nullable=True))
    op.add_column('security_briefs', sa.Column('publish_end_date', sa.String(length=255), nullable=True))
    op.add_column('security_briefs', sa.Column('category', sa.String(length=100), nullable=True))
    op.add_column('security_briefs', sa.Column('location', sa.String(length=255), nullable=True))
    op.add_column('security_briefs', sa.Column('latitude', sa.String(length=20), nullable=True))
    op.add_column('security_briefs', sa.Column('longitude', sa.String(length=20), nullable=True))
    op.alter_column('security_briefs', 'brief_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('GENERAL', 'EVENT_SPECIFIC', name='brieftype'),
               existing_nullable=False)
    op.alter_column('security_briefs', 'content_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('TEXT', 'VIDEO', name='contenttype'),
               existing_nullable=False)
    op.alter_column('security_briefs', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_security_briefs_brief_type'), table_name='security_briefs')
    op.drop_index(op.f('idx_security_briefs_event_id'), table_name='security_briefs')
    op.drop_index(op.f('idx_security_briefs_tenant_id'), table_name='security_briefs')
    op.create_index(op.f('ix_security_briefs_id'), 'security_briefs', ['id'], unique=False)
    op.alter_column('transport_bookings', 'booking_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('airport_pickup', 'event_transfer', 'office_visit', 'custom', name='bookingtype'),
               existing_nullable=False)
    op.alter_column('transport_bookings', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               type_=sa.Enum('pending', 'confirmed', 'package_collected', 'visitor_picked_up', 'in_transit', 'completed', 'cancelled', name='bookingstatus'),
               existing_nullable=True)
    op.alter_column('transport_bookings', 'has_welcome_package',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('transport_bookings', 'package_collected',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('transport_bookings', 'vendor_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('absolute_taxi', 'manual_vendor', name='vendortype'),
               existing_nullable=False)
    op.alter_column('transport_bookings', 'visitor_picked_up',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('transport_bookings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transport_bookings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_transport_bookings_event_id'), table_name='transport_bookings')
    op.drop_index(op.f('idx_transport_bookings_scheduled_time'), table_name='transport_bookings')
    op.drop_index(op.f('idx_transport_bookings_status'), table_name='transport_bookings')
    op.drop_index(op.f('idx_transport_bookings_type'), table_name='transport_bookings')
    op.create_index(op.f('ix_transport_bookings_id'), 'transport_bookings', ['id'], unique=False)
    op.alter_column('transport_status_updates', 'status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('pending', 'confirmed', 'package_collected', 'visitor_picked_up', 'in_transit', 'completed', 'cancelled', name='bookingstatus'),
               existing_nullable=False)
    op.alter_column('transport_status_updates', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_transport_status_updates_booking_id'), table_name='transport_status_updates')
    op.create_index(op.f('ix_transport_status_updates_id'), 'transport_status_updates', ['id'], unique=False)
    op.drop_constraint(op.f('transport_status_updates_booking_id_fkey'), 'transport_status_updates', type_='foreignkey')
    op.create_foreign_key(None, 'transport_status_updates', 'transport_bookings', ['booking_id'], ['id'])
    op.alter_column('transport_vendors', 'vendor_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('absolute_taxi', 'manual_vendor', name='vendortype'),
               existing_nullable=False)
    op.alter_column('transport_vendors', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('transport_vendors', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transport_vendors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_transport_vendors_active'), table_name='transport_vendors')
    op.create_index(op.f('ix_transport_vendors_id'), 'transport_vendors', ['id'], unique=False)
    op.drop_index(op.f('idx_useful_contacts_tenant_id'), table_name='useful_contacts')
    op.create_index(op.f('ix_useful_contacts_id'), 'useful_contacts', ['id'], unique=False)
    op.create_index(op.f('ix_useful_contacts_tenant_id'), 'useful_contacts', ['tenant_id'], unique=False)
    op.drop_index(op.f('idx_user_brief_acknowledgments_brief_id'), table_name='user_brief_acknowledgments')
    op.drop_index(op.f('idx_user_brief_acknowledgments_user_id'), table_name='user_brief_acknowledgments')
    op.drop_constraint(op.f('user_brief_acknowledgments_user_id_brief_id_key'), 'user_brief_acknowledgments', type_='unique')
    op.create_index(op.f('ix_user_brief_acknowledgments_id'), 'user_brief_acknowledgments', ['id'], unique=False)
    op.alter_column('user_roles', 'role',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('SUPER_ADMIN', 'MT_ADMIN', 'HR_ADMIN', 'EVENT_ADMIN', 'STAFF', 'USER', 'GUEST', name='roletype'),
               existing_nullable=False)
    op.alter_column('user_roles', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('user_roles', 'granted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('user_roles', 'revoked_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('idx_user_roles_is_active'), table_name='user_roles')
    op.drop_index(op.f('idx_user_roles_role'), table_name='user_roles')
    op.drop_index(op.f('idx_user_roles_user_id'), table_name='user_roles')
    op.drop_constraint(op.f('user_roles_user_id_role_is_active_key'), 'user_roles', type_='unique')
    op.create_index(op.f('ix_user_roles_id'), 'user_roles', ['id'], unique=False)
    op.alter_column('user_tenants', 'role',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               type_=sa.Enum('SUPER_ADMIN', 'MT_ADMIN', 'HR_ADMIN', 'EVENT_ADMIN', 'VISITOR', 'GUEST', 'STAFF', name='usertenantrole'),
               existing_nullable=False)
    op.alter_column('user_tenants', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('user_tenants', 'is_primary',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('user_tenants', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.alter_column('user_tenants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_user_tenants_is_primary'), table_name='user_tenants')
    op.drop_index(op.f('idx_user_tenants_role'), table_name='user_tenants')
    op.drop_index(op.f('idx_user_tenants_tenant_id'), table_name='user_tenants')
    op.drop_index(op.f('idx_user_tenants_user_id'), table_name='user_tenants')
    op.drop_constraint(op.f('user_tenants_user_id_tenant_id_key'), 'user_tenants', type_='unique')
    op.create_index(op.f('ix_user_tenants_id'), 'user_tenants', ['id'], unique=False)
    op.drop_constraint(op.f('user_tenants_tenant_id_fkey'), 'user_tenants', type_='foreignkey')
    op.drop_constraint(op.f('user_tenants_user_id_fkey'), 'user_tenants', type_='foreignkey')
    op.create_foreign_key(None, 'user_tenants', 'tenants', ['tenant_id'], ['slug'])
    op.create_foreign_key(None, 'user_tenants', 'users', ['user_id'], ['id'])
    op.alter_column('users', 'must_change_password',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('vendor_accommodations', 'accommodation_type',
               existing_type=sa.VARCHAR(length=100),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vendor_accommodations', 'location',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('vendor_accommodations', 'capacity',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vendor_accommodations', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=True)
    op.alter_column('vendor_accommodations', 'current_occupants',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.drop_index(op.f('idx_vendor_accommodations_tenant_id'), table_name='vendor_accommodations')
    op.create_index(op.f('ix_vendor_accommodations_id'), 'vendor_accommodations', ['id'], unique=False)
    op.create_index(op.f('ix_vendor_accommodations_tenant_id'), 'vendor_accommodations', ['tenant_id'], unique=False)
    op.drop_column('vendor_accommodations', 'created_by')
    op.alter_column('vendor_event_accommodations', 'single_rooms',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('vendor_event_accommodations', 'double_rooms',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('vendor_event_accommodations', 'current_occupants',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('vendor_event_accommodations', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('vendor_event_accommodations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_vendor_event_accommodations_event_id'), table_name='vendor_event_accommodations')
    op.drop_index(op.f('ix_vendor_event_accommodations_vendor_id'), table_name='vendor_event_accommodations')
    op.drop_constraint(op.f('fk_vendor_event_accommodations_event_id'), 'vendor_event_accommodations', type_='foreignkey')
    op.drop_constraint(op.f('fk_vendor_event_accommodations_vendor_accommodation_id'), 'vendor_event_accommodations', type_='foreignkey')
    op.create_foreign_key(None, 'vendor_event_accommodations', 'events', ['event_id'], ['id'])
    op.create_foreign_key(None, 'vendor_event_accommodations', 'vendor_accommodations', ['vendor_accommodation_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'vendor_event_accommodations', type_='foreignkey')
    op.drop_constraint(None, 'vendor_event_accommodations', type_='foreignkey')
    op.create_foreign_key(op.f('fk_vendor_event_accommodations_vendor_accommodation_id'), 'vendor_event_accommodations', 'vendor_accommodations', ['vendor_accommodation_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_vendor_event_accommodations_event_id'), 'vendor_event_accommodations', 'events', ['event_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('ix_vendor_event_accommodations_vendor_id'), 'vendor_event_accommodations', ['vendor_accommodation_id'], unique=False)
    op.create_index(op.f('ix_vendor_event_accommodations_event_id'), 'vendor_event_accommodations', ['event_id'], unique=False)
    op.alter_column('vendor_event_accommodations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vendor_event_accommodations', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('vendor_event_accommodations', 'current_occupants',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('vendor_event_accommodations', 'double_rooms',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('vendor_event_accommodations', 'single_rooms',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.add_column('vendor_accommodations', sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_vendor_accommodations_tenant_id'), table_name='vendor_accommodations')
    op.drop_index(op.f('ix_vendor_accommodations_id'), table_name='vendor_accommodations')
    op.create_index(op.f('idx_vendor_accommodations_tenant_id'), 'vendor_accommodations', ['tenant_id'], unique=False)
    op.alter_column('vendor_accommodations', 'current_occupants',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               nullable=False)
    op.alter_column('vendor_accommodations', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               nullable=False)
    op.alter_column('vendor_accommodations', 'capacity',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1'),
               existing_nullable=False)
    op.alter_column('vendor_accommodations', 'location',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('vendor_accommodations', 'accommodation_type',
               existing_type=sa.VARCHAR(length=100),
               server_default=sa.text("'Hotel'::character varying"),
               existing_nullable=False)
    op.alter_column('users', 'must_change_password',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.drop_constraint(None, 'user_tenants', type_='foreignkey')
    op.drop_constraint(None, 'user_tenants', type_='foreignkey')
    op.create_foreign_key(op.f('user_tenants_user_id_fkey'), 'user_tenants', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('user_tenants_tenant_id_fkey'), 'user_tenants', 'tenants', ['tenant_id'], ['slug'], ondelete='CASCADE')
    op.drop_index(op.f('ix_user_tenants_id'), table_name='user_tenants')
    op.create_unique_constraint(op.f('user_tenants_user_id_tenant_id_key'), 'user_tenants', ['user_id', 'tenant_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_tenants_user_id'), 'user_tenants', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_tenants_tenant_id'), 'user_tenants', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_user_tenants_role'), 'user_tenants', ['role'], unique=False)
    op.create_index(op.f('idx_user_tenants_is_primary'), 'user_tenants', ['is_primary'], unique=False)
    op.alter_column('user_tenants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('user_tenants', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('user_tenants', 'is_primary',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('user_tenants', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('user_tenants', 'role',
               existing_type=sa.Enum('SUPER_ADMIN', 'MT_ADMIN', 'HR_ADMIN', 'EVENT_ADMIN', 'VISITOR', 'GUEST', 'STAFF', name='usertenantrole'),
               server_default=sa.text("'staff'::character varying"),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_index(op.f('ix_user_roles_id'), table_name='user_roles')
    op.create_unique_constraint(op.f('user_roles_user_id_role_is_active_key'), 'user_roles', ['user_id', 'role', 'is_active'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_roles_role'), 'user_roles', ['role'], unique=False)
    op.create_index(op.f('idx_user_roles_is_active'), 'user_roles', ['is_active'], unique=False)
    op.alter_column('user_roles', 'revoked_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('user_roles', 'granted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('user_roles', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('user_roles', 'role',
               existing_type=sa.Enum('SUPER_ADMIN', 'MT_ADMIN', 'HR_ADMIN', 'EVENT_ADMIN', 'STAFF', 'USER', 'GUEST', name='roletype'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_index(op.f('ix_user_brief_acknowledgments_id'), table_name='user_brief_acknowledgments')
    op.create_unique_constraint(op.f('user_brief_acknowledgments_user_id_brief_id_key'), 'user_brief_acknowledgments', ['user_id', 'brief_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_brief_acknowledgments_user_id'), 'user_brief_acknowledgments', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_brief_acknowledgments_brief_id'), 'user_brief_acknowledgments', ['brief_id'], unique=False)
    op.drop_index(op.f('ix_useful_contacts_tenant_id'), table_name='useful_contacts')
    op.drop_index(op.f('ix_useful_contacts_id'), table_name='useful_contacts')
    op.create_index(op.f('idx_useful_contacts_tenant_id'), 'useful_contacts', ['tenant_id'], unique=False)
    op.drop_index(op.f('ix_transport_vendors_id'), table_name='transport_vendors')
    op.create_index(op.f('idx_transport_vendors_active'), 'transport_vendors', ['is_active'], unique=False)
    op.alter_column('transport_vendors', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('transport_vendors', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transport_vendors', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('transport_vendors', 'vendor_type',
               existing_type=sa.Enum('absolute_taxi', 'manual_vendor', name='vendortype'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_constraint(None, 'transport_status_updates', type_='foreignkey')
    op.create_foreign_key(op.f('transport_status_updates_booking_id_fkey'), 'transport_status_updates', 'transport_bookings', ['booking_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_transport_status_updates_id'), table_name='transport_status_updates')
    op.create_index(op.f('idx_transport_status_updates_booking_id'), 'transport_status_updates', ['booking_id'], unique=False)
    op.alter_column('transport_status_updates', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transport_status_updates', 'status',
               existing_type=sa.Enum('pending', 'confirmed', 'package_collected', 'visitor_picked_up', 'in_transit', 'completed', 'cancelled', name='bookingstatus'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_index(op.f('ix_transport_bookings_id'), table_name='transport_bookings')
    op.create_index(op.f('idx_transport_bookings_type'), 'transport_bookings', ['booking_type'], unique=False)
    op.create_index(op.f('idx_transport_bookings_status'), 'transport_bookings', ['status'], unique=False)
    op.create_index(op.f('idx_transport_bookings_scheduled_time'), 'transport_bookings', ['scheduled_time'], unique=False)
    op.create_index(op.f('idx_transport_bookings_event_id'), 'transport_bookings', ['event_id'], unique=False)
    op.alter_column('transport_bookings', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('transport_bookings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('transport_bookings', 'visitor_picked_up',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('transport_bookings', 'vendor_type',
               existing_type=sa.Enum('absolute_taxi', 'manual_vendor', name='vendortype'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('transport_bookings', 'package_collected',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('transport_bookings', 'has_welcome_package',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('transport_bookings', 'status',
               existing_type=sa.Enum('pending', 'confirmed', 'package_collected', 'visitor_picked_up', 'in_transit', 'completed', 'cancelled', name='bookingstatus'),
               server_default=sa.text("'pending'::character varying"),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('transport_bookings', 'booking_type',
               existing_type=sa.Enum('airport_pickup', 'event_transfer', 'office_visit', 'custom', name='bookingtype'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_index(op.f('ix_security_briefs_id'), table_name='security_briefs')
    op.create_index(op.f('idx_security_briefs_tenant_id'), 'security_briefs', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_security_briefs_event_id'), 'security_briefs', ['event_id'], unique=False)
    op.create_index(op.f('idx_security_briefs_brief_type'), 'security_briefs', ['brief_type'], unique=False)
    op.alter_column('security_briefs', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('security_briefs', 'content_type',
               existing_type=sa.Enum('TEXT', 'VIDEO', name='contenttype'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.alter_column('security_briefs', 'brief_type',
               existing_type=sa.Enum('GENERAL', 'EVENT_SPECIFIC', name='brieftype'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_column('security_briefs', 'longitude')
    op.drop_column('security_briefs', 'latitude')
    op.drop_column('security_briefs', 'location')
    op.drop_column('security_briefs', 'category')
    op.drop_column('security_briefs', 'publish_end_date')
    op.drop_column('security_briefs', 'publish_start_date')
    op.drop_column('security_briefs', 'status')
    op.add_column('rooms', sa.Column('gender_restriction', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'rooms', type_='foreignkey')
    op.create_foreign_key(op.f('rooms_tenant_id_fkey'), 'rooms', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(op.f('rooms_guesthouse_id_fkey'), 'rooms', 'guesthouses', ['guesthouse_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_rooms_tenant_id'), table_name='rooms')
    op.drop_index(op.f('ix_rooms_id'), table_name='rooms')
    op.create_index(op.f('idx_rooms_guesthouse_id'), 'rooms', ['guesthouse_id'], unique=False)
    op.alter_column('rooms', 'current_occupants',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('rooms', 'is_occupied',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('rooms', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('rooms', 'tenant_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_role_change_logs_id'), table_name='role_change_logs')
    op.create_index(op.f('idx_role_change_logs_user_id'), 'role_change_logs', ['user_id'], unique=False)
    op.create_index(op.f('idx_role_change_logs_user_email'), 'role_change_logs', ['user_email'], unique=False)
    op.create_index(op.f('idx_role_change_logs_action'), 'role_change_logs', ['action'], unique=False)
    op.alter_column('role_change_logs', 'role',
               existing_type=sa.Enum('SUPER_ADMIN', 'MT_ADMIN', 'HR_ADMIN', 'EVENT_ADMIN', 'STAFF', 'USER', 'GUEST', name='roletype'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.create_index(op.f('ix_notifications_tenant_id'), 'notifications', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_index(op.f('idx_notifications_tenant_id'), 'notifications', ['tenant_id'], unique=False)
    op.alter_column('notifications', 'action_url',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('notifications', 'notification_type',
               existing_type=postgresql.ENUM('USER_CREATED', 'USER_ACTIVATED', 'USER_DEACTIVATED', 'ROLE_CHANGED', 'TENANT_CREATED', 'TENANT_ACTIVATED', 'TENANT_DEACTIVATED', 'VISITOR_INVITED', 'EVENT_CREATED', 'DOCUMENT_UPLOADED', 'SYSTEM_ANNOUNCEMENT', 'CHAT_MESSAGE', name='notificationtype'),
               nullable=False)
    op.alter_column('notifications', 'tenant_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('guesthouses', sa.Column('contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('guesthouses', sa.Column('contact_email', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_guesthouses_tenant_id'), table_name='guesthouses')
    op.drop_index(op.f('ix_guesthouses_id'), table_name='guesthouses')
    op.create_index(op.f('idx_guesthouses_tenant_id'), 'guesthouses', ['tenant_id'], unique=False)
    op.alter_column('guesthouses', 'created_by',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('guesthouses', 'occupied_rooms',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('guesthouses', 'total_rooms',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               nullable=False)
    op.alter_column('guesthouses', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('guesthouses', 'contact_person',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('guesthouses', 'longitude',
               existing_type=sa.String(length=20),
               type_=sa.NUMERIC(precision=11, scale=8),
               existing_nullable=True)
    op.alter_column('guesthouses', 'latitude',
               existing_type=sa.String(length=20),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=True)
    op.alter_column('guesthouses', 'address',
               existing_type=sa.TEXT(),
               nullable=False)
    op.add_column('events', sa.Column('food_details', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('room_info', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('rates', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('accommodation', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('accommodation_setup_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'events', type_='foreignkey')
    op.create_foreign_key(op.f('events_tenant_id_fkey'), 'events', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(op.f('events_accommodation_setup_id_fkey'), 'events', 'vendor_event_accommodations', ['accommodation_setup_id'], ['id'])
    op.drop_constraint(None, 'events', type_='unique')
    op.drop_index(op.f('ix_events_id'), table_name='events')
    op.create_index(op.f('idx_events_tenant_id'), 'events', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_events_start_date'), 'events', ['start_date'], unique=False)
    op.create_index(op.f('idx_events_end_date'), 'events', ['end_date'], unique=False)
    op.create_index(op.f('idx_events_duration_days'), 'events', ['duration_days'], unique=False)
    op.alter_column('events', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'Draft'::character varying"),
               existing_nullable=True)
    op.drop_index(op.f('ix_event_participants_id'), table_name='event_participants')
    op.create_index(op.f('ix_event_participants_event_id'), 'event_participants', ['event_id'], unique=False)
    op.create_index(op.f('idx_event_participants_event_id'), 'event_participants', ['event_id'], unique=False)
    op.create_index(op.f('idx_event_participants_email'), 'event_participants', ['email'], unique=False)
    op.create_unique_constraint(op.f('event_participants_event_id_email_key'), 'event_participants', ['event_id', 'email'], postgresql_nulls_not_distinct=False)
    op.alter_column('event_participants', 'requires_eta',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('event_participants', 'status',
               existing_type=sa.String(length=50),
               server_default=sa.text("'invited'::character varying"),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('event_participants', 'participant_role',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('event_participants', 'role',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'attendee'::character varying"),
               existing_nullable=True)
    op.alter_column('event_participants', 'full_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('event_participants', 'travelling_from_country')
    op.drop_constraint(None, 'event_attachments', type_='foreignkey')
    op.create_foreign_key(op.f('event_attachments_event_id_fkey'), 'event_attachments', 'events', ['event_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_event_attachments_id'), table_name='event_attachments')
    op.create_index(op.f('idx_event_attachments_event_id'), 'event_attachments', ['event_id'], unique=False)
    op.alter_column('event_attachments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('event_attachments', 'url',
               existing_type=sa.VARCHAR(length=500),
               server_default=sa.text("'https://example.com'::character varying"),
               existing_nullable=False)
    op.alter_column('event_attachments', 'name',
               existing_type=sa.VARCHAR(length=255),
               server_default=sa.text("'Untitled'::character varying"),
               existing_nullable=False)
    op.drop_index(op.f('ix_event_agenda_id'), table_name='event_agenda')
    op.alter_column('event_agenda', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('event_agenda', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('event_agenda', 'event_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_admin_invitations_invitation_token'), table_name='admin_invitations')
    op.drop_index(op.f('ix_admin_invitations_id'), table_name='admin_invitations')
    op.drop_index(op.f('ix_admin_invitations_email'), table_name='admin_invitations')
    op.create_index(op.f('idx_admin_invitations_token'), 'admin_invitations', ['invitation_token'], unique=False)
    op.create_index(op.f('idx_admin_invitations_status'), 'admin_invitations', ['status'], unique=False)
    op.create_index(op.f('idx_admin_invitations_email'), 'admin_invitations', ['email'], unique=False)
    op.create_unique_constraint(op.f('admin_invitations_invitation_token_key'), 'admin_invitations', ['invitation_token'], postgresql_nulls_not_distinct=False)
    op.alter_column('admin_invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('admin_invitations', 'user_existed',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('admin_invitations', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=sa.text("'pending'::character varying"),
               existing_nullable=True)
    op.drop_index(op.f('ix_accommodation_allocations_tenant_id'), table_name='accommodation_allocations')
    op.drop_index(op.f('ix_accommodation_allocations_id'), table_name='accommodation_allocations')
    op.create_index(op.f('idx_accommodation_allocations_vendor_id'), 'accommodation_allocations', ['vendor_accommodation_id'], unique=False)
    op.create_index(op.f('idx_accommodation_allocations_tenant_id'), 'accommodation_allocations', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_accommodation_allocations_status'), 'accommodation_allocations', ['status'], unique=False)
    op.create_index(op.f('idx_accommodation_allocations_room_id'), 'accommodation_allocations', ['room_id'], unique=False)
    op.create_index(op.f('idx_accommodation_allocations_participant_id'), 'accommodation_allocations', ['participant_id'], unique=False)
    op.create_index(op.f('idx_accommodation_allocations_event_id'), 'accommodation_allocations', ['event_id'], unique=False)
    op.alter_column('accommodation_allocations', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=sa.text("'active'::character varying"),
               existing_nullable=True)
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('profile_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('profile_image_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('data_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('data_deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_profiles_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_profiles_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_profiles_user_id'), 'user_profiles', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_profiles_data_deleted'), 'user_profiles', ['data_deleted'], unique=False)
    op.create_table('participant_allocations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('participant_allocations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('event_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('allocated_quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('redeemed_quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_item_id'], ['event_items.id'], name='participant_allocations_event_item_id_fkey'),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name='participant_allocations_participant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='participant_allocations_pkey'),
    sa.UniqueConstraint('event_item_id', 'participant_id', name='participant_allocations_event_item_id_participant_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_participant_allocations_participant_id'), 'participant_allocations', ['participant_id'], unique=False)
    op.create_index(op.f('idx_participant_allocations_event_item_id'), 'participant_allocations', ['event_item_id'], unique=False)
    op.create_table('participant_welcome_deliveries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('package_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delivered', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('delivered_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('delivery_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['package_item_id'], ['event_welcome_packages.id'], name=op.f('participant_welcome_deliveries_package_item_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_welcome_deliveries_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_welcome_deliveries_pkey')),
    sa.UniqueConstraint('participant_id', 'package_item_id', name=op.f('participant_welcome_deliverie_participant_id_package_item_i_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_participant_welcome_deliveries_participant_id'), 'participant_welcome_deliveries', ['participant_id'], unique=False)
    op.create_table('participant_perdiem',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('daily_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('duration_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('approved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('paid', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('payment_reference', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('participant_perdiem_event_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_perdiem_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_perdiem_pkey')),
    sa.UniqueConstraint('participant_id', 'event_id', name=op.f('participant_perdiem_participant_id_event_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_participant_perdiem_participant_id'), 'participant_perdiem', ['participant_id'], unique=False)
    op.create_index(op.f('idx_participant_perdiem_event_id'), 'participant_perdiem', ['event_id'], unique=False)
    op.create_index(op.f('idx_participant_perdiem_approved'), 'participant_perdiem', ['approved'], unique=False)
    op.create_table('event_feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('participant_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('participant_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('overall_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('content_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('organization_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('venue_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('suggestions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('would_recommend', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("would_recommend::text = ANY (ARRAY['Yes'::character varying, 'No'::character varying, 'Maybe'::character varying]::text[])", name=op.f('event_feedback_would_recommend_check')),
    sa.CheckConstraint('content_rating >= 1::double precision AND content_rating <= 5::double precision', name=op.f('event_feedback_content_rating_check')),
    sa.CheckConstraint('organization_rating >= 1::double precision AND organization_rating <= 5::double precision', name=op.f('event_feedback_organization_rating_check')),
    sa.CheckConstraint('overall_rating >= 1::double precision AND overall_rating <= 5::double precision', name=op.f('event_feedback_overall_rating_check')),
    sa.CheckConstraint('venue_rating >= 1::double precision AND venue_rating <= 5::double precision', name=op.f('event_feedback_venue_rating_check')),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_feedback_event_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('event_feedback_participant_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('event_feedback_pkey')),
    sa.UniqueConstraint('event_id', 'participant_email', name=op.f('event_feedback_event_id_participant_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_event_feedback_participant_email'), 'event_feedback', ['participant_email'], unique=False)
    op.create_index(op.f('idx_event_feedback_event_id'), 'event_feedback', ['event_id'], unique=False)
    op.create_table('inventory',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('inventory_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(length=50), server_default=sa.text("'good'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='inventory_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_inventory_tenant_id'), 'inventory', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_inventory_category'), 'inventory', ['category'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.slug'], name=op.f('roles_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('roles_pkey'))
    )
    op.create_index(op.f('ix_roles_tenant_id'), 'roles', ['tenant_id'], unique=False)
    op.create_table('equipment_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipment_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('urgency', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('admin_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fulfilled_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fulfilled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('equipment_requests_event_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('equipment_requests_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('equipment_requests_pkey'))
    )
    op.create_index(op.f('idx_equipment_requests_status'), 'equipment_requests', ['status'], unique=False)
    op.create_index(op.f('idx_equipment_requests_participant_id'), 'equipment_requests', ['participant_id'], unique=False)
    op.create_index(op.f('idx_equipment_requests_event_id'), 'equipment_requests', ['event_id'], unique=False)
    op.create_table('event_rides',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('event_rides_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('departure_location', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('destination', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('departure_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('driver_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('driver_phone', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('vehicle_details', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('max_capacity', sa.INTEGER(), server_default=sa.text('4'), autoincrement=False, nullable=False),
    sa.Column('current_occupancy', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('special_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='event_rides_event_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_rides_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_event_rides_status'), 'event_rides', ['status'], unique=False)
    op.create_index(op.f('idx_event_rides_event_id'), 'event_rides', ['event_id'], unique=False)
    op.create_index(op.f('idx_event_rides_departure_time'), 'event_rides', ['departure_time'], unique=False)
    op.create_table('participant_requirement_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requirement_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('completion_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completed_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_requirement_status_participant_id_fkey')),
    sa.ForeignKeyConstraint(['requirement_id'], ['event_travel_requirements.id'], name=op.f('participant_requirement_status_requirement_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_requirement_status_pkey')),
    sa.UniqueConstraint('participant_id', 'requirement_id', name=op.f('participant_requirement_statu_participant_id_requirement_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_participant_requirement_status_participant_id'), 'participant_requirement_status', ['participant_id'], unique=False)
    op.create_table('event_speakers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_speakers_event_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_speakers_pkey'))
    )
    op.create_index(op.f('idx_event_speakers_event_id'), 'event_speakers', ['event_id'], unique=False)
    op.create_table('event_participant_checklists',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('event_participant_checklists_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_participant_checklists_pkey'))
    )
    op.create_table('event_welcome_packages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quantity_per_participant', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('is_functional_phone', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('pickup_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_welcome_packages_event_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_welcome_packages_pkey'))
    )
    op.create_index(op.f('idx_event_welcome_packages_event_id'), 'event_welcome_packages', ['event_id'], unique=False)
    op.create_table('participant_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dietary_restrictions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('food_allergies', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('medical_conditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mobility_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('special_requests', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emergency_contact_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('emergency_contact_phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('emergency_contact_relationship', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_profiles_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_profiles_pkey')),
    sa.UniqueConstraint('participant_id', name=op.f('participant_profiles_participant_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_participant_profiles_participant_id'), 'participant_profiles', ['participant_id'], unique=False)
    op.create_table('data_deletion_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('deletion_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tables_affected', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deletion_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('can_restore', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('data_deletion_logs_pkey'))
    )
    op.create_index(op.f('idx_data_deletion_logs_user_id'), 'data_deletion_logs', ['user_id'], unique=False)
    op.create_index(op.f('idx_data_deletion_logs_user_email'), 'data_deletion_logs', ['user_email'], unique=False)
    op.create_index(op.f('idx_data_deletion_logs_deletion_type'), 'data_deletion_logs', ['deletion_type'], unique=False)
    op.create_table('event_items',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('event_items_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('item_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('total_quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('allocated_quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='event_items_event_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_items_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_event_items_event_id'), 'event_items', ['event_id'], unique=False)
    op.create_table('public_registrations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('public_registrations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('oc', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contract_status', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('contract_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('gender_identity', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sex', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('pronouns', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('current_position', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('country_of_work', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('project_of_work', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('personal_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('msf_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hrco_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('career_manager_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ld_manager_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('line_manager_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('travelling_internationally', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('accommodation_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('dietary_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('accommodation_needs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('daily_meals', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('certificate_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('code_of_conduct_confirm', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('travel_requirements_confirm', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('badge_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('motivation_letter', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email_checked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('recommendation_requested', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='public_registrations_event_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name='public_registrations_participant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='public_registrations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_public_registrations_personal_email'), 'public_registrations', ['personal_email'], unique=False)
    op.create_index(op.f('idx_public_registrations_participant_id'), 'public_registrations', ['participant_id'], unique=False)
    op.create_index(op.f('idx_public_registrations_msf_email'), 'public_registrations', ['msf_email'], unique=False)
    op.create_index(op.f('idx_public_registrations_event_id'), 'public_registrations', ['event_id'], unique=False)
    op.create_table('vendor_allocations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('vendor_accommodation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('visitor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('check_in_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('check_out_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['vendor_accommodation_id'], ['vendor_accommodations.id'], name=op.f('vendor_allocations_vendor_accommodation_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('vendor_allocations_pkey'))
    )
    op.create_index(op.f('idx_vendor_allocations_visitor_id'), 'vendor_allocations', ['visitor_id'], unique=False)
    op.create_index(op.f('idx_vendor_allocations_vendor_id'), 'vendor_allocations', ['vendor_accommodation_id'], unique=False)
    op.create_table('item_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('allocation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requested_quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['allocation_id'], ['participant_allocations.id'], name=op.f('item_requests_allocation_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('item_requests_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('item_requests_pkey'))
    )
    op.create_index(op.f('idx_item_requests_status'), 'item_requests', ['status'], unique=False)
    op.create_table('room_agents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hotel_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('api_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('room_agents_pkey')),
    sa.UniqueConstraint('api_token', name=op.f('room_agents_api_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('email', name=op.f('room_agents_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_room_agents_hotel_name'), 'room_agents', ['hotel_name'], unique=False)
    op.create_index(op.f('idx_room_agents_email'), 'room_agents', ['email'], unique=False)
    op.create_index(op.f('idx_room_agents_api_token'), 'room_agents', ['api_token'], unique=False)
    op.create_table('chat_rooms',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('chat_rooms_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('chat_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='chat_rooms_event_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chat_rooms_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_chat_rooms_tenant_id'), 'chat_rooms', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_chat_rooms_event_id'), 'chat_rooms', ['event_id'], unique=False)
    op.create_table('extra_item_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requested_quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_item_id'], ['event_items.id'], name=op.f('extra_item_requests_event_item_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('extra_item_requests_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('extra_item_requests_pkey'))
    )
    op.create_index(op.f('idx_extra_item_requests_participant_id'), 'extra_item_requests', ['participant_id'], unique=False)
    op.create_index(op.f('idx_extra_item_requests_event_item_id'), 'extra_item_requests', ['event_item_id'], unique=False)
    op.create_table('participant_qr_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('qr_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('qr_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_qr_codes_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_qr_codes_pkey')),
    sa.UniqueConstraint('participant_id', name=op.f('participant_qr_codes_participant_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('qr_token', name=op.f('participant_qr_codes_qr_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_participant_qr_codes_id'), 'participant_qr_codes', ['id'], unique=False)
    op.create_index(op.f('idx_participant_qr_codes_qr_token'), 'participant_qr_codes', ['qr_token'], unique=False)
    op.create_index(op.f('idx_participant_qr_codes_participant_id'), 'participant_qr_codes', ['participant_id'], unique=False)
    op.create_table('chat_message_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'sent'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['chat_messages.id'], name=op.f('chat_message_status_message_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('chat_message_status_pkey'))
    )
    op.create_index(op.f('idx_chat_message_status_recipient'), 'chat_message_status', ['recipient_email'], unique=False)
    op.create_index(op.f('idx_chat_message_status_message_id'), 'chat_message_status', ['message_id'], unique=False)
    op.create_table('event_conflict_checks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('conflicting_event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('conflict_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resolved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conflicting_event_id'], ['events.id'], name=op.f('event_conflict_checks_conflicting_event_id_fkey')),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_conflict_checks_event_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_conflict_checks_pkey'))
    )
    op.create_index(op.f('idx_event_conflict_checks_participant_email'), 'event_conflict_checks', ['participant_email'], unique=False)
    op.create_table('event_checklist_items',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('event_checklist_items_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='event_checklist_items_event_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_checklist_items_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_event_checklist_items_event_id'), 'event_checklist_items', ['event_id'], unique=False)
    op.create_table('airport_pickups',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('driver_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('driver_phone', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('driver_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('vehicle_details', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('pickup_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('destination', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('special_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('travel_agent_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('driver_confirmed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('visitor_confirmed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('admin_confirmed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('welcome_package_confirmed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('pickup_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('driver_confirmation_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('visitor_confirmation_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('admin_confirmation_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('confirmed_by_admin', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('airport_pickups_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('airport_pickups_pkey')),
    sa.UniqueConstraint('participant_id', name=op.f('airport_pickups_participant_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_airport_pickups_travel_agent_email'), 'airport_pickups', ['travel_agent_email'], unique=False)
    op.create_index(op.f('idx_airport_pickups_pickup_time'), 'airport_pickups', ['pickup_time'], unique=False)
    op.create_index(op.f('idx_airport_pickups_pickup_completed'), 'airport_pickups', ['pickup_completed'], unique=False)
    op.create_index(op.f('idx_airport_pickups_participant_id'), 'airport_pickups', ['participant_id'], unique=False)
    op.create_table('invitations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('invited_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('accepted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_accepted', sa.VARCHAR(length=10), server_default=sa.text("'false'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('invitations_pkey')),
    sa.UniqueConstraint('token', name=op.f('invitations_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_invitations_token'), 'invitations', ['token'], unique=False)
    op.create_index(op.f('idx_invitations_tenant_id'), 'invitations', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_invitations_email'), 'invitations', ['email'], unique=False)
    op.create_table('perdiem_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('arrival_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('departure_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('calculated_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requested_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('daily_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('justification', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('admin_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('payment_reference', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('perdiem_requests_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('perdiem_requests_pkey')),
    sa.UniqueConstraint('participant_id', name=op.f('perdiem_requests_participant_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_perdiem_requests_status'), 'perdiem_requests', ['status'], unique=False)
    op.create_index(op.f('idx_perdiem_requests_participant_id'), 'perdiem_requests', ['participant_id'], unique=False)
    op.create_index(op.f('idx_perdiem_requests_arrival_date'), 'perdiem_requests', ['arrival_date'], unique=False)
    op.create_table('ride_assignments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ride_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pickup_location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('pickup_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('confirmed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('boarded', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('ride_assignments_participant_id_fkey')),
    sa.ForeignKeyConstraint(['ride_id'], ['event_rides.id'], name=op.f('ride_assignments_ride_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ride_assignments_pkey')),
    sa.UniqueConstraint('participant_id', 'ride_id', name=op.f('ride_assignments_participant_id_ride_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_ride_assignments_ride_id'), 'ride_assignments', ['ride_id'], unique=False)
    op.create_index(op.f('idx_ride_assignments_participant_id'), 'ride_assignments', ['participant_id'], unique=False)
    op.create_table('app_reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('overall_rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ease_of_use', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('functionality_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('design_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('review_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('suggestions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('app_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint('design_rating >= 1 AND design_rating <= 5', name=op.f('app_reviews_design_rating_check')),
    sa.CheckConstraint('ease_of_use >= 1 AND ease_of_use <= 5', name=op.f('app_reviews_ease_of_use_check')),
    sa.CheckConstraint('functionality_rating >= 1 AND functionality_rating <= 5', name=op.f('app_reviews_functionality_rating_check')),
    sa.CheckConstraint('overall_rating >= 1 AND overall_rating <= 5', name=op.f('app_reviews_overall_rating_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('app_reviews_pkey')),
    sa.UniqueConstraint('user_email', name=op.f('app_reviews_user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_app_reviews_user_email'), 'app_reviews', ['user_email'], unique=False)
    op.create_index(op.f('idx_app_reviews_overall_rating'), 'app_reviews', ['overall_rating'], unique=False)
    op.create_table('event_travel_requirements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requirement_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_mandatory', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('deadline_days_before', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_travel_requirements_event_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_travel_requirements_pkey'))
    )
    op.create_index(op.f('idx_event_travel_requirements_event_id'), 'event_travel_requirements', ['event_id'], unique=False)
    op.create_table('room_allocations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('visitor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('check_in_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('check_out_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], name=op.f('room_allocations_room_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('room_allocations_pkey'))
    )
    op.create_index(op.f('idx_room_allocations_visitor_id'), 'room_allocations', ['visitor_id'], unique=False)
    op.create_index(op.f('idx_room_allocations_room_id'), 'room_allocations', ['room_id'], unique=False)
    op.create_table('participant_checklist_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('checklist_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['checklist_item_id'], ['event_checklist_items.id'], name=op.f('participant_checklist_status_checklist_item_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_checklist_status_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_checklist_status_pkey')),
    sa.UniqueConstraint('participant_id', 'checklist_item_id', name=op.f('participant_checklist_status_participant_id_checklist_item__key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_participant_checklist_status_participant_id'), 'participant_checklist_status', ['participant_id'], unique=False)
    op.create_table('ride_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pickup_location', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('preferred_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('special_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('admin_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('ride_requests_event_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('ride_requests_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ride_requests_pkey'))
    )
    op.create_index(op.f('idx_ride_requests_status'), 'ride_requests', ['status'], unique=False)
    op.create_index(op.f('idx_ride_requests_participant_id'), 'ride_requests', ['participant_id'], unique=False)
    op.create_index(op.f('idx_ride_requests_event_id'), 'ride_requests', ['event_id'], unique=False)
    op.create_table('direct_messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sender_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('sender_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('recipient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('recipient_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('direct_messages_pkey'))
    )
    op.create_index(op.f('idx_direct_messages_tenant_id'), 'direct_messages', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_direct_messages_tenant'), 'direct_messages', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_direct_messages_sender_email'), 'direct_messages', ['sender_email'], unique=False)
    op.create_index(op.f('idx_direct_messages_sender'), 'direct_messages', ['sender_email'], unique=False)
    op.create_index(op.f('idx_direct_messages_recipient_email'), 'direct_messages', ['recipient_email'], unique=False)
    op.create_index(op.f('idx_direct_messages_recipient'), 'direct_messages', ['recipient_email'], unique=False)
    op.create_table('redemption_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('allocation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity_redeemed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('redeemed_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('notes', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['allocation_id'], ['participant_allocations.id'], name=op.f('redemption_logs_allocation_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('redemption_logs_pkey'))
    )
    op.create_index(op.f('idx_redemption_logs_allocation_id'), 'redemption_logs', ['allocation_id'], unique=False)
    op.create_table('security_briefings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('document_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('video_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('security_briefings_event_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('security_briefings_pkey'))
    )
    op.create_table('broadcasts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('broadcasts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('broadcast_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=10), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='broadcasts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_broadcasts_tenant_id'), 'broadcasts', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_broadcasts_priority'), 'broadcasts', ['priority'], unique=False)
    op.create_index(op.f('idx_broadcasts_is_active'), 'broadcasts', ['is_active'], unique=False)
    op.create_index(op.f('idx_broadcasts_expires_at'), 'broadcasts', ['expires_at'], unique=False)
    op.create_table('event_contacts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contact_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('availability', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_contacts_event_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_contacts_pkey'))
    )
    op.create_index(op.f('idx_event_contacts_event_id'), 'event_contacts', ['event_id'], unique=False)
    op.create_index(op.f('idx_event_contacts_contact_type'), 'event_contacts', ['contact_type'], unique=False)
    op.create_table('participant_tickets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('departure_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('arrival_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('departure_airport', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('arrival_airport', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('flight_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('airline', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ticket_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_tickets_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_tickets_pkey')),
    sa.UniqueConstraint('participant_id', name=op.f('participant_tickets_participant_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_participant_tickets_participant_id'), 'participant_tickets', ['participant_id'], unique=False)
    op.create_table('event_allocations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('event_allocations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inventory_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity_per_participant', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('drink_vouchers_per_participant', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name='event_allocations_event_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory.id'], name='event_allocations_inventory_item_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='event_allocations_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='event_allocations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_event_allocations_tenant_id'), 'event_allocations', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_event_allocations_status'), 'event_allocations', ['status'], unique=False)
    op.create_index(op.f('idx_event_allocations_event_id'), 'event_allocations', ['event_id'], unique=False)
    op.create_table('line_manager_recommendations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('registration_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('participant_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('participant_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('line_manager_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('operation_center', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('event_title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('event_dates', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('event_location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('recommendation_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('recommendation_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('line_manager_recommendations_event_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['registration_id'], ['public_registrations.id'], name=op.f('line_manager_recommendations_registration_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('line_manager_recommendations_pkey')),
    sa.UniqueConstraint('recommendation_token', name=op.f('line_manager_recommendations_recommendation_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_recommendations_token'), 'line_manager_recommendations', ['recommendation_token'], unique=False)
    op.create_index(op.f('idx_recommendations_event_id'), 'line_manager_recommendations', ['event_id'], unique=False)
    op.create_table('participant_voucher_redemptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('allocation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('redeemed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['allocation_id'], ['event_allocations.id'], name=op.f('participant_voucher_redemptions_allocation_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('participant_voucher_redemptions_participant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('participant_voucher_redemptions_pkey'))
    )
    op.create_index(op.f('ix_participant_voucher_redemptions_id'), 'participant_voucher_redemptions', ['id'], unique=False)
    op.create_index(op.f('idx_participant_voucher_redemptions_participant'), 'participant_voucher_redemptions', ['participant_id'], unique=False)
    op.create_index(op.f('idx_participant_voucher_redemptions_allocation_participant'), 'participant_voucher_redemptions', ['allocation_id', 'participant_id'], unique=False)
    op.create_index(op.f('idx_participant_voucher_redemptions_allocation'), 'participant_voucher_redemptions', ['allocation_id'], unique=False)
    op.create_table('room_assignments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hotel_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('room_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('room_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('floor', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('building', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('check_in_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('check_out_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('room_agent_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('checked_in', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('checked_in_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('check_in_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('admin_checked_in', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('amenities', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('wifi_password', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('special_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('room_assignments_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('room_assignments_pkey')),
    sa.UniqueConstraint('participant_id', name=op.f('room_assignments_participant_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_room_assignments_room_agent'), 'room_assignments', ['room_agent_email'], unique=False)
    op.create_index(op.f('idx_room_assignments_participant_id'), 'room_assignments', ['participant_id'], unique=False)
    op.create_index(op.f('idx_room_assignments_hotel_room'), 'room_assignments', ['hotel_name', 'room_number'], unique=False)
    op.create_index(op.f('idx_room_assignments_check_in_date'), 'room_assignments', ['check_in_date'], unique=False)
    op.create_table('notification_queue',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failed_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_queue_pkey'))
    )
    op.create_index(op.f('idx_notification_queue_type'), 'notification_queue', ['notification_type'], unique=False)
    op.create_index(op.f('idx_notification_queue_sent'), 'notification_queue', ['sent'], unique=False)
    op.create_index(op.f('idx_notification_queue_recipient'), 'notification_queue', ['recipient_email'], unique=False)
    op.create_table('broadcast_reads',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('broadcast_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['broadcast_id'], ['broadcasts.id'], name=op.f('broadcast_reads_broadcast_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('broadcast_reads_pkey')),
    sa.UniqueConstraint('broadcast_id', 'user_email', name=op.f('broadcast_reads_broadcast_id_user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_broadcast_reads_user_email'), 'broadcast_reads', ['user_email'], unique=False)
    op.create_index(op.f('idx_broadcast_reads_broadcast_id'), 'broadcast_reads', ['broadcast_id'], unique=False)
    op.create_table('chat_messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('chat_room_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('sender_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_admin_message', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('reply_to_message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chat_room_id'], ['chat_rooms.id'], name=op.f('chat_messages_chat_room_id_fkey')),
    sa.ForeignKeyConstraint(['reply_to_message_id'], ['chat_messages.id'], name=op.f('fk_chat_messages_reply_to_message_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('chat_messages_pkey'))
    )
    op.create_index(op.f('idx_chat_messages_created_at'), 'chat_messages', ['created_at'], unique=False)
    op.create_index(op.f('idx_chat_messages_chat_room_id'), 'chat_messages', ['chat_room_id'], unique=False)
    op.create_table('event_checkins',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('checkin_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('checkin_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('checked_in_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('qr_token_used', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('badge_printed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('badge_printed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_checkins_event_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('event_checkins_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_checkins_pkey')),
    sa.UniqueConstraint('participant_id', 'event_id', 'checkin_date', name=op.f('event_checkins_participant_id_event_id_checkin_date_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_event_checkins_participant_id'), 'event_checkins', ['participant_id'], unique=False)
    op.create_index(op.f('idx_event_checkins_event_id'), 'event_checkins', ['event_id'], unique=False)
    op.create_index(op.f('idx_event_checkins_checkin_date'), 'event_checkins', ['checkin_date'], unique=False)
    op.create_table('room_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('hotel_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('rule_title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('rule_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('room_rules_pkey'))
    )
    op.create_index(op.f('idx_room_rules_hotel_name'), 'room_rules', ['hotel_name'], unique=False)
    op.create_table('event_reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('overall_rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('organization_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('venue_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('catering_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('review_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('suggestions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('would_recommend', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint('catering_rating >= 1 AND catering_rating <= 5', name=op.f('event_reviews_catering_rating_check')),
    sa.CheckConstraint('content_rating >= 1 AND content_rating <= 5', name=op.f('event_reviews_content_rating_check')),
    sa.CheckConstraint('organization_rating >= 1 AND organization_rating <= 5', name=op.f('event_reviews_organization_rating_check')),
    sa.CheckConstraint('overall_rating >= 1 AND overall_rating <= 5', name=op.f('event_reviews_overall_rating_check')),
    sa.CheckConstraint('venue_rating >= 1 AND venue_rating <= 5', name=op.f('event_reviews_venue_rating_check')),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_reviews_event_id_fkey')),
    sa.ForeignKeyConstraint(['participant_id'], ['event_participants.id'], name=op.f('event_reviews_participant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_reviews_pkey')),
    sa.UniqueConstraint('participant_id', 'event_id', name=op.f('event_reviews_participant_id_event_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_event_reviews_overall_rating'), 'event_reviews', ['overall_rating'], unique=False)
    op.create_index(op.f('idx_event_reviews_event_id'), 'event_reviews', ['event_id'], unique=False)
    op.create_table('travel_agents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('api_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('travel_agents_pkey')),
    sa.UniqueConstraint('api_token', name=op.f('travel_agents_api_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('email', name=op.f('travel_agents_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_travel_agents_tenant_id'), 'travel_agents', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_travel_agents_email'), 'travel_agents', ['email'], unique=False)
    op.create_index(op.f('idx_travel_agents_api_token'), 'travel_agents', ['api_token'], unique=False)
    op.drop_index(op.f('ix_feedback_responses_id'), table_name='feedback_responses')
    op.drop_table('feedback_responses')
    op.drop_index(op.f('ix_agenda_feedback_id'), table_name='agenda_feedback')
    op.drop_table('agenda_feedback')
    op.drop_index(op.f('ix_user_consents_id'), table_name='user_consents')
    op.drop_table('user_consents')
    op.drop_index(op.f('ix_emergency_contacts_id'), table_name='emergency_contacts')
    op.drop_table('emergency_contacts')
    # ### end Alembic commands ###