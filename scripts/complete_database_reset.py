# File: scripts/complete_database_reset.py
"""
Complete database reset script - DESTROYS ALL DATA
Use with extreme caution!
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

import subprocess
from sqlalchemy import create_engine, text
from app.core.config import settings
from app.core.security import get_password_hash
from app.models.user import UserRole, AuthProvider, UserStatus

def confirm_reset():
    """Confirm the user really wants to reset everything"""
    print("‚ö†Ô∏è  WARNING: COMPLETE DATABASE RESET")
    print("=" * 50)
    print("This will:")
    print("‚ùå DROP ALL TABLES")
    print("‚ùå DELETE ALL DATA") 
    print("‚ùå REMOVE ALL USERS")
    print("‚ùå REMOVE ALL TENANTS")
    print("‚ùå REMOVE ALL NOTIFICATIONS")
    print("‚ùå REMOVE ALL MIGRATION HISTORY")
    print()
    print("‚úÖ CREATE FRESH DATABASE")
    print("‚úÖ RUN ALL MIGRATIONS FROM SCRATCH")
    print("‚úÖ CREATE SINGLE SUPER ADMIN:")
    print("   üìß Email: abereenock95@gmail.com")
    print("   üîí Password: SuperAdmin2025!")
    print()
    
    confirm = input("Are you ABSOLUTELY SURE? Type 'RESET_EVERYTHING' to confirm: ")
    return confirm == "RESET_EVERYTHING"

def drop_all_tables(database_url: str, db_name: str = "database"):
    """Drop all tables from database"""
    print(f"üí£ Dropping all tables from {db_name}...")
    
    try:
        engine = create_engine(database_url)
        with engine.connect() as conn:
            # Get all table names
            result = conn.execute(text("""
                SELECT tablename FROM pg_tables 
                WHERE schemaname = 'public'
            """))
            tables = [row[0] for row in result.fetchall()]
            
            if not tables:
                print(f"‚úÖ {db_name} is already empty")
                return True
            
            print(f"üóëÔ∏è  Found {len(tables)} tables to drop:")
            for table in tables:
                print(f"   - {table}")
            
            # Drop all tables
            for table in tables:
                try:
                    conn.execute(text(f'DROP TABLE IF EXISTS "{table}" CASCADE'))
                    print(f"   ‚úÖ Dropped {table}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Could not drop {table}: {e}")
            
            # Drop alembic version table specifically
            try:
                conn.execute(text('DROP TABLE IF EXISTS alembic_version CASCADE'))
                print("   ‚úÖ Dropped alembic_version")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  alembic_version: {e}")
            
            # Drop any remaining sequences
            try:
                result = conn.execute(text("""
                    SELECT sequence_name FROM information_schema.sequences 
                    WHERE sequence_schema = 'public'
                """))
                sequences = [row[0] for row in result.fetchall()]
                
                for seq in sequences:
                    conn.execute(text(f'DROP SEQUENCE IF EXISTS "{seq}" CASCADE'))
                    print(f"   ‚úÖ Dropped sequence {seq}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Sequences: {e}")
            
            # Drop custom enum types
            try:
                result = conn.execute(text("""
                    SELECT typname FROM pg_type 
                    WHERE typtype = 'e' AND typnamespace = (
                        SELECT oid FROM pg_namespace WHERE nspname = 'public'
                    )
                """))
                enums = [row[0] for row in result.fetchall()]
                
                for enum_name in enums:
                    conn.execute(text(f'DROP TYPE IF EXISTS "{enum_name}" CASCADE'))
                    print(f"   ‚úÖ Dropped enum {enum_name}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Enums: {e}")
            
            conn.commit()
            print(f"‚úÖ {db_name} completely cleared!")
            return True
            
    except Exception as e:
        print(f"‚ùå Failed to drop tables from {db_name}: {e}")
        return False

def run_fresh_migrations():
    """Run all migrations from scratch"""
    print("üöÄ Running fresh migrations...")
    
    try:
        # Remove any existing migration files that might cause conflicts
        print("üßπ Cleaning up old migration artifacts...")
        
        # Initialize alembic fresh
        print("üîß Initializing fresh migration environment...")
        result = subprocess.run(
            ["alembic", "upgrade", "head"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Fresh migrations completed successfully!")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå Migration failed!")
            print(f"Stdout: {result.stdout}")
            print(f"Stderr: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Migration error: {e}")
        return False

def create_super_admin():
    """Create the single super admin user"""
    print("üë§ Creating super admin user...")
    
    try:
        from sqlalchemy.orm import Session
        from app.db.database import SessionLocal
        from app.models.user import User
        
        # User details
        email = "abereenock95@gmail.com"
        password = "SuperAdmin2025!"
        full_name = "Super Administrator"
        
        db = SessionLocal()
        
        try:
            # Create the user
            hashed_password = get_password_hash(password)
            
            super_admin = User(
                email=email,
                hashed_password=hashed_password,
                full_name=full_name,
                role=UserRole.SUPER_ADMIN,
                status=UserStatus.ACTIVE,
                is_active=True,
                tenant_id=None,  # Super admin doesn't belong to any tenant
                auth_provider=AuthProvider.LOCAL
            )
            
            db.add(super_admin)
            db.commit()
            db.refresh(super_admin)
            
            print(f"‚úÖ Super admin created successfully!")
            print(f"   üìß Email: {email}")
            print(f"   üîí Password: {password}")
            print(f"   üë§ Name: {full_name}")
            print(f"   üõ°Ô∏è  Role: Super Administrator")
            print(f"   üÜî ID: {super_admin.id}")
            
            return True
            
        except Exception as e:
            db.rollback()
            print(f"‚ùå Failed to create super admin: {e}")
            return False
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False

def main():
    """Main reset process"""
    print("üîÑ COMPLETE DATABASE RESET")
    print("=" * 50)
    
    # Confirm reset
    if not confirm_reset():
        print("‚ùå Reset cancelled by user")
        return False
    
    print("\nüöÄ Starting complete database reset...")
    
    # Reset local database
    print("\n1Ô∏è‚É£ RESETTING LOCAL DATABASE")
    print("-" * 30)
    if not drop_all_tables(settings.DATABASE_URL, "Local Database"):
        print("‚ùå Failed to reset local database")
        return False
    
    # Reset Render database (if different)
    render_db_url = "postgresql://msafiri_db_user:v9yhk3xq8OyVVyd5eGrRM6T755amuvwl@dpg-d29gte2li9vc73fncigg-a.oregon-postgres.render.com/msafiri_db"
    
    if settings.DATABASE_URL != render_db_url:
        print("\n2Ô∏è‚É£ RESETTING RENDER DATABASE")
        print("-" * 30)
        if not drop_all_tables(render_db_url, "Render Database"):
            print("‚ùå Failed to reset Render database")
            return False
    else:
        print("\n2Ô∏è‚É£ RENDER DATABASE")
        print("-" * 30)
        print("‚úÖ Using same database as local - already reset")
    
    # Run fresh migrations
    print("\n3Ô∏è‚É£ RUNNING FRESH MIGRATIONS")
    print("-" * 30)
    if not run_fresh_migrations():
        print("‚ùå Failed to run migrations")
        return False
    
    # Create super admin
    print("\n4Ô∏è‚É£ CREATING SUPER ADMIN USER")
    print("-" * 30)
    if not create_super_admin():
        print("‚ùå Failed to create super admin")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ COMPLETE DATABASE RESET SUCCESSFUL!")
    print("=" * 60)
    print()
    print("üìã SUPER ADMIN CREDENTIALS:")
    print("   üìß Email: abereenock95@gmail.com")
    print("   üîí Password: SuperAdmin2025!")
    print()
    print("üîß NEXT STEPS:")
    print("1. Start your API: uvicorn app.main:app --reload")
    print("2. Test login at: http://localhost:8000/docs")
    print("3. Test password reset functionality")
    print("4. Deploy to Render (should work cleanly now)")
    print()
    print("‚ö†Ô∏è  REMEMBER:")
    print("- Change the password after first login")
    print("- All previous data has been permanently deleted")
    print("- Both local and Render databases are now identical")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå RESET FAILED!")
        print("Check the errors above and try again.")
        sys.exit(1)
    else:
        print("\n‚úÖ RESET COMPLETED SUCCESSFULLY!")
        print("Your databases are now clean and ready to use.")